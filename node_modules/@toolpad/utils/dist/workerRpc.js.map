{"version":3,"sources":["../src/workerRpc.ts"],"sourcesContent":["import { MessagePort, MessageChannel } from 'worker_threads';\nimport { Awaitable } from './types';\nimport { errorFrom, serializeError } from './errors';\n\n/**\n * Helpers that are intended to set up rpc between a Node.js worker thread and the main thread.\n * Create the worker and pass a port in the workerData.\n *\n * On the main thread:\n *\n *     const rpcChannel = new MessageChannel()\n *     const worker = new Worker('./myWorker.js', {\n *       workerData: { rpcPort: rpcChannel.port1 },\n *       transferList: [rpcChannel.port1]\n *     })\n *\n *     // Depending of the direction of communication, either\n *     const client = createRpcClient(rpcChannel.port2)\n *     // or\n *     serveRpc(rpcChannel.port2, {\n *       myMethod\n *     })\n *\n * On the worker thread:\n *\n *     // Depending of the direction of communication, either\n *     const client = createRpcClient(workerData.rpcPort)\n *     // or\n *     serveRpc(workerData.rpcPort, {\n *       myMethod\n *     })\n *\n * Use multiple channels for bidirectional communication.\n */\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Methods = Record<string, (...args: any[]) => Awaitable<any>>;\n\ntype MessageRequest = {\n  method: string;\n  args: unknown[];\n  port: MessagePort;\n};\n\ninterface MsgResponse<T = unknown> {\n  error?: unknown;\n  result?: T;\n}\n\ninterface CreateRpcClientOptions {\n  timeout?: number;\n}\n\nexport function createRpcClient<M extends Methods>(\n  port: MessagePort,\n  { timeout = 30000 }: CreateRpcClientOptions = {},\n): M {\n  return new Proxy({} as M, {\n    get: (target, prop) => {\n      if (typeof prop !== 'string') {\n        return Reflect.get(target, prop);\n      }\n      return (...args: unknown[]) => {\n        return new Promise((resolve, reject) => {\n          const { port1, port2 } = new MessageChannel();\n\n          const timeoutId = setTimeout(() => {\n            port1.close();\n          }, timeout);\n\n          port1.on('message', (msg: MsgResponse) => {\n            clearTimeout(timeoutId);\n            if (msg.error) {\n              reject(msg.error);\n            } else {\n              resolve(msg.result);\n            }\n          });\n\n          port1.start();\n\n          port.postMessage(\n            {\n              method: prop,\n              args,\n              port: port2,\n            } satisfies MessageRequest,\n            [port2],\n          );\n        });\n      };\n    },\n  });\n}\n\nexport function serveRpc<M extends Methods>(port: MessagePort, methods: M) {\n  const methodMap = new Map(Object.entries(methods));\n  port.on('message', async (msg: MessageRequest) => {\n    const method = methodMap.get(msg.method);\n    if (method) {\n      try {\n        const result = await method(...msg.args);\n        msg.port.postMessage({ result } satisfies MsgResponse);\n      } catch (rawError) {\n        msg.port.postMessage({ error: serializeError(errorFrom(rawError)) } satisfies MsgResponse);\n      }\n    } else {\n      msg.port.postMessage({\n        error: new Error(`Method \"${msg.method}\" not found`),\n      } satisfies MsgResponse);\n    }\n  });\n  port.start();\n}\n"],"mappings":";;;;;;;;AAAA,SAAsB,sBAAsB;AAqDrC,SAAS,gBACd,MACA,EAAE,UAAU,IAAM,IAA4B,CAAC,GAC5C;AACH,SAAO,IAAI,MAAM,CAAC,GAAQ;AAAA,IACxB,KAAK,CAAC,QAAQ,SAAS;AACrB,UAAI,OAAO,SAAS,UAAU;AAC5B,eAAO,QAAQ,IAAI,QAAQ,IAAI;AAAA,MACjC;AACA,aAAO,IAAI,SAAoB;AAC7B,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAM,EAAE,OAAO,MAAM,IAAI,IAAI,eAAe;AAE5C,gBAAM,YAAY,WAAW,MAAM;AACjC,kBAAM,MAAM;AAAA,UACd,GAAG,OAAO;AAEV,gBAAM,GAAG,WAAW,CAAC,QAAqB;AACxC,yBAAa,SAAS;AACtB,gBAAI,IAAI,OAAO;AACb,qBAAO,IAAI,KAAK;AAAA,YAClB,OAAO;AACL,sBAAQ,IAAI,MAAM;AAAA,YACpB;AAAA,UACF,CAAC;AAED,gBAAM,MAAM;AAEZ,eAAK;AAAA,YACH;AAAA,cACE,QAAQ;AAAA,cACR;AAAA,cACA,MAAM;AAAA,YACR;AAAA,YACA,CAAC,KAAK;AAAA,UACR;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEO,SAAS,SAA4B,MAAmB,SAAY;AACzE,QAAM,YAAY,IAAI,IAAI,OAAO,QAAQ,OAAO,CAAC;AACjD,OAAK,GAAG,WAAW,OAAO,QAAwB;AAChD,UAAM,SAAS,UAAU,IAAI,IAAI,MAAM;AACvC,QAAI,QAAQ;AACV,UAAI;AACF,cAAM,SAAS,MAAM,OAAO,GAAG,IAAI,IAAI;AACvC,YAAI,KAAK,YAAY,EAAE,OAAO,CAAuB;AAAA,MACvD,SAAS,UAAU;AACjB,YAAI,KAAK,YAAY,EAAE,OAAO,eAAe,UAAU,QAAQ,CAAC,EAAE,CAAuB;AAAA,MAC3F;AAAA,IACF,OAAO;AACL,UAAI,KAAK,YAAY;AAAA,QACnB,OAAO,IAAI,MAAM,WAAW,IAAI,MAAM,aAAa;AAAA,MACrD,CAAuB;AAAA,IACzB;AAAA,EACF,CAAC;AACD,OAAK,MAAM;AACb;","names":[]}