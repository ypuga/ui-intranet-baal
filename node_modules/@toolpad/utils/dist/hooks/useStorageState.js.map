{"version":3,"sources":["../../src/hooks/useStorageState.ts"],"sourcesContent":["import * as React from 'react';\nimport { Emitter } from '../events';\n\n// storage events only work across windows, we'll use an event emitter to announce within the window\nconst emitter = new Emitter<Record<string, null>>();\n\nfunction subscribe(area: Storage, key: string, cb: () => void): () => void {\n  const storageHandler = (event: StorageEvent) => {\n    if (event.storageArea === area && event.key === key) {\n      cb();\n    }\n  };\n  window.addEventListener('storage', storageHandler);\n  emitter.on(key, cb);\n  return () => {\n    window.removeEventListener('storage', storageHandler);\n    emitter.off(key, cb);\n  };\n}\n\nfunction getSnapshot(area: Storage, key: string): string | null {\n  return area.getItem(key);\n}\n\nfunction setValue(area: Storage, key: string, value: string | null) {\n  if (typeof window !== 'undefined') {\n    if (value === null) {\n      area.removeItem(key);\n    } else {\n      area.setItem(key, String(value));\n    }\n    emitter.emit(key, null);\n  }\n}\n\ntype Initializer<T> = () => T;\n\ntype UseStorageStateHookResult<T> = [T, React.Dispatch<React.SetStateAction<T>>];\n\nfunction useStorageStateServer(\n  kind: 'session' | 'local',\n  key: string,\n  initializer: string | Initializer<string>,\n): UseStorageStateHookResult<string>;\nfunction useStorageStateServer(\n  kind: 'session' | 'local',\n  key: string,\n  initializer?: string | null | Initializer<string | null>,\n): UseStorageStateHookResult<string | null>;\nfunction useStorageStateServer(\n  kind: 'session' | 'local',\n  key: string,\n  initializer: string | null | Initializer<string | null> = null,\n): UseStorageStateHookResult<string | null> | UseStorageStateHookResult<string> {\n  const [initialValue] = React.useState(initializer);\n  return [initialValue, () => {}];\n}\n\n/**\n * Sync state to local/session storage so that it persists through a page refresh. Usage is\n * similar to useState except we pass in a storage key so that we can default\n * to that value on page load instead of the specified initial value.\n *\n * Since the storage API isn't available in server-rendering environments, we\n * return initialValue during SSR and hydration.\n *\n * Things this hook does different from existing solutions:\n * - SSR-capable: it shows initial value during SSR and hydration, but immediately\n *   initializes when clientside mounted.\n * - Sync state across tabs: When another tab changes the value in the storage area, the\n *   current tab follows suit.\n */\nfunction useStorageStateBrowser(\n  kind: 'session' | 'local',\n  key: string,\n  initializer: string | Initializer<string>,\n): UseStorageStateHookResult<string>;\nfunction useStorageStateBrowser(\n  kind: 'session' | 'local',\n  key: string,\n  initializer?: string | null | Initializer<string | null>,\n): UseStorageStateHookResult<string | null>;\nfunction useStorageStateBrowser(\n  kind: 'session' | 'local',\n  key: string,\n  initializer: string | null | Initializer<string | null> = null,\n): UseStorageStateHookResult<string | null> | UseStorageStateHookResult<string> {\n  const [initialValue] = React.useState(initializer);\n  const area = kind === 'session' ? window.sessionStorage : window.localStorage;\n  const subscribeKey = React.useCallback((cb: () => void) => subscribe(area, key, cb), [area, key]);\n  const getKeySnapshot = React.useCallback(\n    () => getSnapshot(area, key) ?? initialValue,\n    [area, initialValue, key],\n  );\n  const getKeyServerSnapshot = React.useCallback(() => initialValue, [initialValue]);\n\n  const storedValue = React.useSyncExternalStore(\n    subscribeKey,\n    getKeySnapshot,\n    getKeyServerSnapshot,\n  );\n\n  const setStoredValue = React.useCallback(\n    (value: React.SetStateAction<string | null>) => {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setValue(area, key, valueToStore);\n    },\n    [area, key, storedValue],\n  );\n\n  return [storedValue, setStoredValue];\n}\n\nexport default typeof window === 'undefined' ? useStorageStateServer : useStorageStateBrowser;\n"],"mappings":";;;;;AAAA,YAAY,WAAW;AAIvB,IAAM,UAAU,IAAI,QAA8B;AAElD,SAAS,UAAU,MAAe,KAAa,IAA4B;AACzE,QAAM,iBAAiB,CAAC,UAAwB;AAC9C,QAAI,MAAM,gBAAgB,QAAQ,MAAM,QAAQ,KAAK;AACnD,SAAG;AAAA,IACL;AAAA,EACF;AACA,SAAO,iBAAiB,WAAW,cAAc;AACjD,UAAQ,GAAG,KAAK,EAAE;AAClB,SAAO,MAAM;AACX,WAAO,oBAAoB,WAAW,cAAc;AACpD,YAAQ,IAAI,KAAK,EAAE;AAAA,EACrB;AACF;AAEA,SAAS,YAAY,MAAe,KAA4B;AAC9D,SAAO,KAAK,QAAQ,GAAG;AACzB;AAEA,SAAS,SAAS,MAAe,KAAa,OAAsB;AAClE,MAAI,OAAO,WAAW,aAAa;AACjC,QAAI,UAAU,MAAM;AAClB,WAAK,WAAW,GAAG;AAAA,IACrB,OAAO;AACL,WAAK,QAAQ,KAAK,OAAO,KAAK,CAAC;AAAA,IACjC;AACA,YAAQ,KAAK,KAAK,IAAI;AAAA,EACxB;AACF;AAgBA,SAAS,sBACP,MACA,KACA,cAA0D,MACoB;AAC9E,QAAM,CAAC,YAAY,IAAU,eAAS,WAAW;AACjD,SAAO,CAAC,cAAc,MAAM;AAAA,EAAC,CAAC;AAChC;AA0BA,SAAS,uBACP,MACA,KACA,cAA0D,MACoB;AAC9E,QAAM,CAAC,YAAY,IAAU,eAAS,WAAW;AACjD,QAAM,OAAO,SAAS,YAAY,OAAO,iBAAiB,OAAO;AACjE,QAAM,eAAqB,kBAAY,CAAC,OAAmB,UAAU,MAAM,KAAK,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC;AAChG,QAAM,iBAAuB;AAAA,IAC3B,MAAM,YAAY,MAAM,GAAG,KAAK;AAAA,IAChC,CAAC,MAAM,cAAc,GAAG;AAAA,EAC1B;AACA,QAAM,uBAA6B,kBAAY,MAAM,cAAc,CAAC,YAAY,CAAC;AAEjF,QAAM,cAAoB;AAAA,IACxB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,iBAAuB;AAAA,IAC3B,CAAC,UAA+C;AAC9C,YAAM,eAAe,iBAAiB,WAAW,MAAM,WAAW,IAAI;AACtE,eAAS,MAAM,KAAK,YAAY;AAAA,IAClC;AAAA,IACA,CAAC,MAAM,KAAK,WAAW;AAAA,EACzB;AAEA,SAAO,CAAC,aAAa,cAAc;AACrC;AAEA,IAAO,0BAAQ,OAAO,WAAW,cAAc,wBAAwB;","names":[]}